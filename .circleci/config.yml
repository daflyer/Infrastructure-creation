version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

# commands:
#    # Exercise - Rollback
#   destroy_environment:
#     steps:
#       - run:
#           name: Destroy environment
#           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
#           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
#           # when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name rollbackStack

# Define the jobs we want to run for this project
jobs:  
  # create_infrastructure: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file template.yml \
  #             --stack-name myStackForInfra \
  #             --region us-east-1
  # rollback_infrastructure: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create rollback Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file template.yml \
  #             --stack-name rollbackStack \
  #             --region us-east-1
  #             ;
  #     - run: return 1
        
  #     - destroy_environment 
      # when: on_fail
          
      # - destroy_environment
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: 
  #         name: deleterollback
  #         command: return 1
  #     - destroy_environment:  
  #       when: on_fail

  # configure_infrastructure: 
  #   docker: 
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #             # You can get this ID in the section where you registered the SSH Key
  #             fingerprints: ["28:12:07:99:b9:4e:be:00:31:41:bc:b7:77:36:75:26"] 
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt main-remote.yml     
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://blorg.udacity.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi 
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
# Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name testingHabib-bistro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

# Sequential workflow
# workflows:
#   # Name the workflow
#   myWorkflow:
#     jobs:
#       # - create_infrastructure
#       # - configure_infrastructure
#       # - smoke_test
#       # - rollback_infrastructure
workflows:
    my_workflow:
      jobs:
        - create_and_deploy_front_end
        - promote_to_production:
            requires: 
              - create_and_deploy_front_end
        - get_last_deployment_id
        - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production